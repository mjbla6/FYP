import visa
rm = visa.ResourceManager()
my_instrument = rm.open_resource('GPIB0::23::INSTR')

## AMPLITUDE ## softkey panel
Reference_Level = "DISPlay:WINDow:TRACe:Y:SCALe:RLEVel " ## DBm or W
Scale_Div = "DISPlay:WINDow:TRACe:Y:SCALe:PDIVision " ## Db
Display_Mode = "DISPlay:WINDow:TRACe:Y:SCALe:SPACing " ## Log or Linear
Sensitivity_Automatic = "SENSe:POWer:DC:RANGe:LOWer:AUTO 1" ## do not use 0, any number will work and it will automatically assign a number
Sensitivity_Manual = "SENSe:POWer:DC:RANGe:LOWer " ## nW W etc
Peak_to_Reference_Level_Max = "CALCulate:MARKer:MAXimum" ## seems to work, need to test with signal
Peak_to_Reference_Level_SR = "CALCulate:MARKer:SRLevel" ## seems to work, need to test with signal
Trace_Integ = "CALCulate:TPOWer:STATe " ## On or Off

## AMPLITUDE SETUP ## within amplitude menu
Reference_Level_Position = "DISPlay:WINDow:TRACe:Y:SCALe:RPOSition " ## x num of divisions
Amplitude_Units = "UNIT:POW " ## AUTO or W
Auto_Ranging = "SENSe:POWer:DC:RANGe:AUTO " ## On or Off
Auto_Zero = "CALibration:ZERO:AUTO " ## 1 = On, 0 = Off
Auto_Chop_Modea = "SENSe:CHOP:STATe " ## On or Off
Power_Calibration = "CALibration:POWer:STATe " ## ask bill, user not selectable?
Amplitude_Correction_Set = "SENSe:CORRection:CSET " ## 1,2,3,4
Amplitude_Correction_Mode = "SENSe:CORRection:STATe " ## On or Off

## APPLICATIONS ## fixed button at bottom
Application_List = my_instrument.query("INSTrument:CATalog?") ##Get a list of measurement modes and applications
Application_Select = "INSTrument:SELect " ## enter in one of the apps from the list in ' '
Auto_Align = "CALibration:ALIGn" ## test with signal
Auto_Align_Marker = "CALibration:ALIGn:MARKer" ## test with signal
Auto_Measure = "DISPlay:WINDow:TRACe:ALL:SCALe:AUTO" ## test with signal

## BANDWIDTH/SWEEP ## softkey panel
Res_BW_Auto = "SENSe:BANDwidth:RESolution:AUTO 1"
Res_BW_Man = "SENSe:BANDwidth:RESolution " ## nm etc
Video_BW_Auto = "SENSe:BANDwidth:VIDeo:AUTO 1"
Video_BW_Man = "SENSe:BANDwidth:VIDeo " ## Hz 
Sweep_Time_Auto = "SENSe:SWEep:TIME:AUTO 1"
Sweep_Time_Man = "SENSe:SWEep:TIME " ## s
Repeat_Sweep = "INITiate:CONTinuous " ## On or Off
Single_Sweep = "INITiate:IMMediate" ## Command ignored?

## MORE BW/SWEEP FUNCTIONS ## within bandwidth/sweep menu
Trigger_Mode_Internal = "TRIG:SOUR IMM"
Trigger_Mode_Gated = "????" ## no instructions or syntax for this
Trigger_Mode_External = "TRIG:SOUR EXT"
ADC_Pos = "TRIGger:SLOPe POS"
ADC_Neg = "TRIGger:SLOPe NEG"
####### NOT TESTED ########
ADC_AC = "TRIGger:SLOPe EITH" ## not sure about eith, test
Trigger_Delay = "TRIGger:DELay " ## value in s, ms, etc
ADC_Trig_Sync = "TRIGger:OUTPut " ## on, off or auto 1
ADC_Sync_Out = "TRIGger:OUTPut:PULSe:STATe " ## on, off, 1 ,0
ADC_Sync_Out_Duty_Cycle = "TRIGger:OUTPut:PULSe:DCYCle " ## numerical value
ADC_Sync_Out_Pulse_Width = "TRIGger:OUTPut:PULSe:WIDTh " ## value in s, ms, etc
##Local GPIB GoToLocal Command ???

## MARKER ##
## will need to make alterations to this marker selection depending on how the interaction works
marker_num = raw_input('Select Marker [1,2,3,4]: ')
## need to go through and check
Active_Marker_On = "CALCulate:MARKer[%s]:STATe ON" %marker_num ## on,off,1,0 
Active_Marker_Off = "CALCulate:MARKer[%s]:AOFF" %marker_num ## maybe 1?
Active_Trace = "CALCulate:MARKer[%s]:TRACe " %marker_num ## TRA|TRB|TRC|TRD|TRE|TRF need to figure out what these do, may need a new variable for each one
Peak_Search = "CALCulate:MARKer[%s]:MAXimum" %marker_num
Marker_to_CENTER = "CALCulate:MARKer[%s]:SCENter" %marker_num
Marker_to_REF LEVEL = "CALCulate:MARKer[%s]:SRLevel" %marker_num
## MARKER SETUP ##
Normal_Marker_Units = "CALCulate:MARKer[%s]:X:READout" %marker_num
BW_Marker_Units = "CALCulate:MARKer[%s]:FUNCtion:BANDwidth:READout" %marker_num
Delta_Marker_Units = "CALCulate:MARKer[%s]:FUNCtion:DELTa:X:READout" %marker_num
Normal_Delta_Marker_Interpolation = "CALCulate:MARKer[%s]:INTerpolation" %marker_num
Bandwidth_Marker_Interpolation = "CALCulate:MARKer[%s]:FUNCtion:BANDwidth:INTerpolation" %marker_num
Peak_Excursion = "CALCulate:MARKer[%s]:PEXCursion:PEAK" %marker_num
Pit_Excursion = "CALCulate:MARKer[%s]:PEXCursion:PIT" %marker_num
Use_Marker_Search_Threshold = "CALCulate:THReshold"
Noise_Marker_Reference Bandwidth = "CALCulate:MARKer[%s]:FUNCtion:NOISe:BANDwidth" %marker_num
Peak_Search_at_End_of_Each_Sweep = "????" ## no command
OSNR_Noise = "CALCulate:MARKer[%s]:FUNCtion:OSNR:MODE" %marker_num
OSNR_Noise_Off = "CALCulate:MARKer[%s]:FUNCtion:OSNR:OFFSet" %marker_num

More Marker Functions
Marker Search Menu
Search Mode Peak
Peak Search CALCulate:MARKer:MAXimum
Next Peak Down ↓ CALCulate:MARKer:MAXimum:NEXT
Next Peak Left ← CALCulate:MARKer:MAXimum:LEFT
Next Peak Right → CALCulate:MARKer:MAXimum:RIGHt
Active Marker CALCulate:MARKer:STATe
CALCulate:MARKer:AOFF
Search Mode Pit
Pit Search CALCulate:MARKer:MINimum
Next Pit Up − CALCulate:MARKer:MINimum:NEXT
Next Pit Left ← CALCulate:MARKer:MINimum:LEFT
Next Pit Right → CALCulate:MARKer:MINimum:RIGHt
Active Marker CALCulate:MARKer:STATe
CALCulate:MARKer:AOFF


##print my_instrument.write("TRIGger:SLOPe NEG")
